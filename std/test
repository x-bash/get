# shellcheck shell=bash
assert(){
    if [ $# -ne 0 ]; then
        eval "$*"
    else
        code=$(cat)
        eval "$code"
    fi

    if [ $? -eq 0 ]; then
        return 0
    else
        echo "$MSG"
        return 1
    fi
}

assert.eq(){
    local s1=${1:?Real}
    local s2=${2:?Expect}
    if [ "$s1" != "$2" ]; then
        echo "Failed. Expect '$s1' to be '$s2'" >&2
        return 1
    fi
}

# Two ways
# assert.grep hi <<<"hello hi"
# assert.grep hi <README.md
assert.grep(){
    grep "${1:?Please provide grep pattern}"
    if [ $? -eq 0 ]; then
        return 0
    else
        echo "${MSG:-Grep Pattern Failed matching: $1}"
        return 1
    fi
}

testFun(){
    # Do it in usual way
    local TMP_1 TMP_2
    TMP_1=$(file.tmp)
    TMP_2=$(file.tmp)
    
    docker run -it ubuntu bash > "$TMP_1"
    MSG="testFun failed" \
        assert.grep "work" -- "work" <"$TMP_1"
    assert.grep "$(line "$TMP_1" 2)" "$TMP_2"
    MSG="testFun failed for reason like" \
        assert.grep "$(line "$TMP_1" 3)" "$TMP_2"

    # assert.grep "work" -- "testFun failed" <$TMP_1
    # assert.grep $(line $TMP_1 2) $TMP_2
    # assert.grep "$(line $TMP_1 3)" $TMP_2 -- "testFun failed for reason like" 

    # assert.eq 2 $(line $TMP_1 3)
    # assert.eq 2 $(file.line $TMP_1 3)
    # assert.eq 2 $(sed -n 3p $TMP_1)
}

# Example:
# TIMEOUT=3 MSGURE="Fail if wrong" @ts "work1" testFun1
# TIMEOUT=3 MSGURE="Fail if wrong" @testsuite "work1" testFun1
# TIMEOUT=5 @ts "work2" testFun2

