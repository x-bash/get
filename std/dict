# shellcheck shell=bash
# Hashset

# using declared set

# Using 

@src std/list
@src std/str

dict.make(){
    list.make "$@"
}

dict.new(){
    oo.create_new_function dict "$@"
}

dict.free(){
    list.free
}

dict.has(){
    dict.get "$1" > /dev/null
}

dict.size(){
    list.size
}

dict.isempty(){
    list.isempty
}

dict.get(){
    local key=${1:?Provide key}
    local keyecode
    keyecode=$(str.base64 "$key")
    for i in $(list.print); do
        local k
        k=$(echo "$i" | cut -d ':' -f 1)
        if [ "$k" = "$keyecode" ]; then
            local v
            v=$(echo "$i" | cut -d ':' -f 2)
            str.unbase64 "$v"
            return 0
        fi
    done
    return 1
}

dict.put(){
    local key
    key="$(str.base64 "${1:?Provide key}")"
    local value
    value="$(str.base64 "${2:?Provide value}")"
    dict.remove "$1"
    # echo "$key":"$value"
    list.push "$key:$value"
}

# give key
dict.remove(){
    local key="${1:?Key}"
    local key_base
    key_base="$(str.base64 "${1:?Provide key}")"
    local idx=0
    for i in $(list.print); do
        local k
        k=$(echo -n "$i" | cut -d ':' -f 1)
        if [ "$k" = "$key_base" ]; then
            # echo remove $idx
            list.remove "$idx"
            return 0
        fi
        (( idx=idx+1 ))
    done
    return 1
}

# TODO: add key/value filter in arguments or enviroments
dict.print(){
    local k v
    local sep=${DICT_PRINT_SEP:-" = "}
    for i in $(list.print); do
        k=$(echo -n "$i" | cut -d ':' -f 1)
        v=$(echo -n "$i" | cut -d ':' -f 2)
        echo "$(str.unbase64 "$k")${sep}$(str.unbase64 "$v")"
    done
}

dict.dump(){
    if [ $# -eq 0 ]; then
        list.print
        return 0
    fi
    list.print | tee "$@"
}

dict.load(){
    local name=${1?:Provide name}
    shift
    dict.make "$name"

    if [ $# -eq 0 ]; then
        while read -r s; do
            list.push "$s"
        done
        return 0
    fi

    while read -r s; do
        list.push "$s"
    done <"$1"
}
