@src utils

list.make(){
    eval "export $1=()"
    # export O=$1
}

# list.new(){
#     list.make "$@"
#     while [ $# -gt 0 ]; do
#         eval "
#         $1.free(){ O=$1 list.free; }
#         $1.size(){ O=$1 list.size; }
#         $1.isempty(){ O=$1 list.isempty; }
#         $1.last_idx(){ O=$1 list.last_idx; }
#         $1.first(){ O=$1 list.first; }
#         $1.get(){ O=$1 list.get "\$@"; }
#         $1.index_of(){ O=$1 list.index_of "\$@"; }
#         $1.remove(){ O=$1 list.remove "\$@"; }
#         $1.pop(){ O=$1 list.pop "\$@"; }
#         $1.push(){ O=$1 list.push "\$@"; }
#         $1.top(){ O=$1 list.top "\$@"; }
#         $1.print(){ O=$1 list.print "\$@"; }
#         "
#         shift
#     done
# }


list.new(){
    utils.create_new_function list "$@"
}

list.free(){
    eval "unset $O"
}

list.size(){
    local code="echo \${#$O[@]}"
    eval "$code"
}

list.isempty(){
    [ $(list.size) -eq 0 ]
}

list.last_idx(){
    echo $(($(list.size) - 1))
}

list.first(){
    if [ $(list.size) -gt 0 ]; then
        eval "echo \${$O[0]}"
        return 0
    fi

    if [ -z "$1" ]; then
        echo "No element to shift" >&2
        return 1
    fi

    echo $1
    return 0
}

list.get(){
    local idx=${1:?Index}
    if [ $idx -ge $(list.size) ]; then
        echo "Index exceeds size" >&2
        return 1
    fi
    eval "echo \${$O[$idx]}"
    return 0
}

list.index_of(){
    local i=0
    for elem in $(list.print); do
        if [ "$elem" = "$1" ]; then
            echo $i
            return 0
        fi
        let i=i+1
    done
    return 1
}

list.remove(){
    local idx=${1:?Index}
    if [ $idx -ge $(list.size) ]; then
        echo "Index exceeds size" >&2
        return 1
    fi
    # eval "echo \${$O[$idx]}"
    eval "$O=( \"\${$O[@]:0:$idx}\" \"\${$O[@]:$((idx+1))}\" )"
    return 0
}

list.shift(){
    if [ $(list.size) -le 0 ]; then
        echo "No element to shift" >&2
        return 1
    fi
    eval "$O=( \"\${$O[@]:1}\" )"
}

list.push(){
    for i in "$@"; do
        # echo $i
        O=$O list._push $i
    done
}

list._push(){
    local code="$O[\${#$O[*]}]=$1"
    # echo $code
    eval "$code"
}

list.pop(){
    local last_idx=$(list.last_idx)
    [ $? -ne 0 ] && return $?
    eval "$O=( \"\${$O[@]:0:$last_idx}\" )"
}

list.top(){
    local last_idx=$(list.last_idx)
    [ $? -ne 0 ] && return $?

    if [ $last_idx -ge 0 ]; then
        eval "echo \${$O[$last_idx]}"
        return 0
    fi

    if [ -z "$1" ]; then 
        echo "No element to pop" >&2
        return 1
    fi
    echo $1
}

list.print(){
    eval "echo \"\${$O[*]}\""
}
