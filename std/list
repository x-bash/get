# shellcheck shell=bash
@src std/oo

list.make(){
    eval "export $1=()"
}

list.new(){
    oo.create_new_function list "$@"
}

list.free(){
    eval "unset $O"
}

list.size(){
    local code="echo \${#${O:?Require Object Name}[@]}"
    eval "$code"
}

list.isempty(){
    [ "$(list.size)" -eq 0 ]
}

list.last_idx(){
    echo $(($(list.size) - 1))
}

list.first(){
    if [ "$(list.size)" -gt 0 ]; then
        eval "echo \${${O:?Require Object Name}[0]}"
        return 0
    fi

    if [ -z "$1" ]; then
        echo "No element to shift" >&2
        return 1
    fi

    echo "$1"
    return 0
}

list.get(){
    local idx=${1:?Index}
    if [ "$idx" -ge "$(list.size)" ]; then
        echo "Index exceeds size" >&2
        return 1
    fi
    eval "echo \${${O:?Require Object Name}[$idx]}"
    return 0
}

# refer arr.indexof in utils
list.index_of(){
    local i=0
    for elem in $(list.print); do
        if [ "$elem" = "$1" ]; then
            echo $i
            return 0
        fi
        ((i=i+1))
    done
    echo -1
    return 1
}

list.remove(){
    local idx=${1:?Index}
    if [ "$idx" -ge "$(list.size)" ]; then
        echo "Index exceeds size" >&2
        return 1
    fi
    # eval "echo \${$O[$idx]}"
    eval "$O=( \"\${${O:?Require Object Name}[@]:0:$idx}\" \"\${${O}[@]:$((idx+1))}\" )"
    return 0
}

list.shift(){
    if [ "$(list.size)" -le 0 ]; then
        echo "No element to shift" >&2
        return 1
    fi
    eval "$O=( \"\${${O:?Require Object Name}[@]:1}\" )"
}

list.push(){
    for i in "$@"; do
        # echo $i
        O=$O list._push "$i"
    done
}

list._push(){
    local code="${O:?Require Object Name}[\${#${O}[*]}]=$1"
    # echo "$code"
    eval "$code"
}

list.pop(){
    local last_idx
    last_idx=$(list.last_idx)
    # shellcheck disable=SC2181
    [ $? -ne 0 ] && return $?
    eval "$O=( \"\${${O:?Require Object Name}[@]:0:$last_idx}\" )"
}

list.top(){
    local last_idx
    last_idx=$(list.last_idx)
    # shellcheck disable=SC2181
    [ $? -ne 0 ] && return $?

    if [ "$last_idx" -ge 0 ]; then
        eval "echo \${${O:?Require Object Name}[$last_idx]}"
        return 0
    fi

    if [ -z "$1" ]; then 
        echo "No element to pop" >&2
        return 1
    fi
    echo "$1"
}

list.print(){
    eval "echo \"\${${O:?Require Object Name}[*]}\""
}
