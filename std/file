
# Doesn't work on some occations.

file.exist_or_append(){
  local filename="$1"
  local string_to_append="$2"
  grep -F --quiet "$string_to_append" "$filename" || echo "$string_to_append" >> "$filename"
  echo "$filename"
}

# Temp facility
@src std/utils

file.tmp.create(){
  local filepath="${TMPDIR}concurrent.$RANDOM"
  touch $filepath
}

# file.find(){
  
# }

@src std/str

# fmap
file.map.open(){
    export KV_MAP=${1:?map}
    touch $KV_MAP
}

file.map.keys(){
    for e in $(cat ${KV_MAP:?"Please invoke map.init()"} | cut -d ' ' -f 1); do
        str.unbase64 $e
    done
}

file.map.values(){
    for e in $(cat ${KV_MAP:?"Please invoke map.init()"} | cut -d ' ' -f 2); do
        str.unbase64 $e
    done
}

file.map.put(){
    echo "$(str.base64 $1) $(str.base64 $2)" >> $KV_MAP
    #TODO: sort and unique
    # cat $KV_MAP | sort | unique
}

file.map.get(){
    local MAP=${KV_MAP:?"Please invoke map.init()"}
    local TARGET=$(str.base64 ${1:?Provide target})
    # notice the following not works: for e in $(cat $MAP); do 
    cat $MAP | while read e
    do
        # echo "111" $e
        local KEY=$(echo $e | cut -d ' ' -f 1)
        if [ "$KEY" == "$TARGET" ]; then
            local VALUE=$(echo $e | cut -d ' ' -f 2)
            # echo $KEY $VALUE
            str.unbase64 $VALUE
            return
        fi
    done
}


