# shellcheck shell=bash
# Doesn't work on some occations.

file.exist_or_append(){
  local filename="$1"
  local string_to_append="$2"
  grep -F --quiet "$string_to_append" "$filename" || echo "$string_to_append" >> "$filename"
  echo "$filename"
}

# Auto delete
@src std/@
alias file.tmp='__file_tmp_filepath="${TMPDIR}tmpfile.$RANDOM"; echo $__file_tmp_filepath; @defer "rm -f $__file_tmp_filepath"'

# mapfile
file.to_array(){
  local REF=${V:?Provide variable name}
  eval "$REF=()"  # FILE_ARRAY=()

  while [ $# -gt 0 ]; do
    #shellcheck disable=SC2034
    while read -r line; do
        # shellcheck disable=SC1087
        eval "$REF=(\"\${$REF[@]}\" \"\$line\")" # FILE_ARRAY=("${FILE_ARRAY[@]}" "$line")
    done <"$1"
    shift
  done
}

@src std/str

# fmap
file.dict.open(){
    export KV_MAP=${1:?map}
    touch "$KV_MAP"
}

file.dict.keys(){
    # for e in $(cat ${KV_MAP:?"Please invoke dict.init()"} | cut -d ' ' -f 1); do
    cut -d ' ' -f 1 "${KV_MAP:?"Please invoke dict.init()"}" | while read -r e; do
        str.unbase64 "$e"
    done
}

file.dict.values(){
    # for e in $(cat ${KV_MAP:?"Please invoke dict.init()"} | cut -d ' ' -f 2); do
    cut -d ' ' -f 2 "${KV_MAP:?"Please invoke dict.init()"}" | while read -r e; do
        str.unbase64 "$e"
    done
}

file.dict.put(){
    echo "$(str.base64 "$1") $(str.base64 "$2")" >> "$KV_MAP"
    #TODO: sort and unique
    # cat $KV_MAP | sort | unique
}

file.dict.get(){
    local MAP=${KV_MAP:?"Please invoke dict.init()"}
    local TARGET KEY VALUE
    TARGET=$(str.base64 "${1:?Provide target}")
    while read -r e; do
        KEY=$(echo "$e" | cut -d ' ' -f 1)
        if [ "$KEY" == "$TARGET" ]; then
            VALUE="$(echo "$e" | cut -d ' ' -f 2)"
            str.unbase64 "$VALUE"
            return
        fi
    done <"$MAP"
}


